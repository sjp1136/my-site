{"version":3,"file":"react-svg.production.min.js","sources":["../node_modules/@babel/runtime/helpers/extends.js","../node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/inheritsLoose.js","../node_modules/@tanem/svg-injector/esm/clone-svg.js","../node_modules/@tanem/svg-injector/esm/svg-cache.js","../node_modules/@tanem/svg-injector/esm/request-queue.js","../node_modules/@tanem/svg-injector/esm/inject-element.js","../node_modules/@tanem/svg-injector/esm/load-svg.js","../node_modules/@tanem/svg-injector/esm/unique-classes.js","../src/index.tsx","../node_modules/@tanem/svg-injector/esm/svg-injector.js","../src/shallow-differs.ts"],"sourcesContent":["function _extends() {\n  module.exports = _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nmodule.exports = _extends;","function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","var cloneSvg = function cloneSvg(sourceSvg) {\n  return sourceSvg.cloneNode(true);\n};\n\nexport default cloneSvg;","var svgCache = {};\nexport default svgCache;","import cloneSvg from './clone-svg.js';\nimport svgCache from './svg-cache.js';\nvar requestQueue = {};\nexport var queueRequest = function queueRequest(url, callback) {\n  requestQueue[url] = requestQueue[url] || [];\n  requestQueue[url].push(callback);\n};\nexport var processRequestQueue = function processRequestQueue(url) {\n  for (var i = 0, len = requestQueue[url].length; i < len; i++) {\n    // Make these calls async so we avoid blocking the page/renderer.\n    ;\n\n    (function (index) {\n      setTimeout(function () {\n        if (Array.isArray(requestQueue[url])) {\n          var cb = requestQueue[url][index];\n\n          if (svgCache[url] instanceof SVGSVGElement) {\n            cb(null, cloneSvg(svgCache[url]));\n          } else if (svgCache[url] instanceof Error) {\n            cb(svgCache[url]);\n          } else {\n            throw new Error('Cannot process requestQueue for ' + url);\n          }\n\n          if (index === requestQueue[url].length - 1) {\n            delete requestQueue[url];\n          }\n        }\n      }, 0);\n    })(i);\n  }\n};","import loadSvg from './load-svg.js';\nimport uniqueClasses from './unique-classes.js';\nvar svgNamespace = 'http://www.w3.org/2000/svg';\nvar xlinkNamespace = 'http://www.w3.org/1999/xlink';\nvar injectedElements = [];\nvar ranScripts = {}; // Script running status\n\nvar injectCount = 0; // Inject a single element\n\nvar injectElement = function injectElement(el, evalScripts, pngFallback, renumerateIRIElements, callback) {\n  var hasSvgSupport = document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');\n  var imgUrl = el.getAttribute('data-src') || el.getAttribute('src'); // We can only inject SVG.\n\n  if (!/\\.svg/i.test(imgUrl)) {\n    callback(new Error('Attempted to inject a file with a non-svg extension: ' + imgUrl));\n    return;\n  } // If we don't have SVG support try to fall back to a png,\n  // either defined per-element via data-fallback or data-png,\n  // or globally via the pngFallback directory setting\n\n\n  if (!hasSvgSupport) {\n    var perElementFallback = el.getAttribute('data-fallback') || el.getAttribute('data-png'); // Per-element specific PNG fallback defined, so use that\n\n    if (perElementFallback) {\n      el.setAttribute('src', perElementFallback);\n      callback();\n    } else if (pngFallback) {\n      // Global PNG fallback directoriy defined, use the same-named PNG\n      el.setAttribute('src', pngFallback + '/' + imgUrl.split('/').pop().replace('.svg', '.png'));\n      callback();\n    } else {\n      // um...\n      callback(new Error('This browser does not support SVG and no PNG fallback was defined.'));\n    }\n\n    return;\n  } // Make sure we aren't already in the process of injecting this element to\n  // avoid a race condition if multiple injections for the same element are run.\n  // :NOTE: Using indexOf() only _after_ we check for SVG support and bail,\n  // so no need for IE8 indexOf() polyfill\n\n\n  if (injectedElements.indexOf(el) !== -1) {\n    return;\n  } // Remember the request to inject this element, in case other injection\n  // calls are also trying to replace this element before we finish\n\n\n  injectedElements.push(el); // Try to avoid loading the orginal image src if possible.\n\n  el.setAttribute('src', ''); // Load it up\n\n  loadSvg(imgUrl, function (error, svg) {\n    if (error) {\n      callback(error);\n      return false;\n    }\n\n    var imgId = el.getAttribute('id');\n\n    if (imgId) {\n      svg.setAttribute('id', imgId);\n    }\n\n    var imgTitle = el.getAttribute('title');\n\n    if (imgTitle) {\n      svg.setAttribute('title', imgTitle);\n    } // Concat the SVG classes + 'injected-svg' + the img classes\n\n\n    var classMerge = [].concat(svg.getAttribute('class') || [], 'injected-svg', el.getAttribute('class') || []).join(' ');\n    svg.setAttribute('class', uniqueClasses(classMerge));\n    var imgStyle = el.getAttribute('style');\n\n    if (imgStyle) {\n      svg.setAttribute('style', imgStyle);\n    } // Copy all the data elements to the svg\n\n\n    var imgData = [].filter.call(el.attributes, function (at) {\n      return /^data-\\w[\\w-]*$/.test(at.name);\n    });\n    Array.prototype.forEach.call(imgData, function (dataAttr) {\n      if (dataAttr.name && dataAttr.value) {\n        svg.setAttribute(dataAttr.name, dataAttr.value);\n      }\n    });\n\n    if (renumerateIRIElements) {\n      // Make sure any internally referenced clipPath ids and their\n      // clip-path references are unique.\n      //\n      // This addresses the issue of having multiple instances of the\n      // same SVG on a page and only the first clipPath id is referenced.\n      //\n      // Browsers often shortcut the SVG Spec and don't use clipPaths\n      // contained in parent elements that are hidden, so if you hide the first\n      // SVG instance on the page, then all other instances lose their clipping.\n      // Reference: https://bugzilla.mozilla.org/show_bug.cgi?id=376027\n      // Handle all defs elements that have iri capable attributes as defined by w3c: http://www.w3.org/TR/SVG/linking.html#processingIRI\n      // Mapping IRI addressable elements to the properties that can reference them:\n      var iriElementsAndProperties = {\n        clipPath: ['clip-path'],\n        'color-profile': ['color-profile'],\n        cursor: ['cursor'],\n        filter: ['filter'],\n        linearGradient: ['fill', 'stroke'],\n        marker: ['marker', 'marker-start', 'marker-mid', 'marker-end'],\n        mask: ['mask'],\n        pattern: ['fill', 'stroke'],\n        radialGradient: ['fill', 'stroke']\n      };\n      var element, elementDefs, properties, currentId, newId;\n      Object.keys(iriElementsAndProperties).forEach(function (key) {\n        element = key;\n        properties = iriElementsAndProperties[key];\n        elementDefs = svg.querySelectorAll('defs ' + element + '[id]');\n\n        for (var i = 0, elementsLen = elementDefs.length; i < elementsLen; i++) {\n          currentId = elementDefs[i].id;\n          newId = currentId + '-' + injectCount; // All of the properties that can reference this element type\n\n          var referencingElements; // eslint-disable-next-line no-loop-func\n\n          Array.prototype.forEach.call(properties, function (property) {\n            // :NOTE: using a substring match attr selector here to deal with IE \"adding extra quotes in url() attrs\"\n            referencingElements = svg.querySelectorAll('[' + property + '*=\"' + currentId + '\"]');\n\n            for (var j = 0, referencingElementLen = referencingElements.length; j < referencingElementLen; j++) {\n              var attrValue = referencingElements[j].getAttribute(property);\n\n              if (attrValue && !attrValue.match(new RegExp('url\\\\(#' + currentId + '\\\\)'))) {\n                continue;\n              }\n\n              referencingElements[j].setAttribute(property, 'url(#' + newId + ')');\n            }\n          });\n          var allLinks = svg.querySelectorAll('[*|href]');\n          var links = [];\n\n          for (var k = 0, allLinksLen = allLinks.length; k < allLinksLen; k++) {\n            if (allLinks[k].getAttributeNS(xlinkNamespace, 'href').toString() === '#' + elementDefs[i].id) {\n              links.push(allLinks[k]);\n            }\n          }\n\n          for (var l = 0, linksLen = links.length; l < linksLen; l++) {\n            links[l].setAttributeNS(xlinkNamespace, 'href', '#' + newId);\n          }\n\n          elementDefs[i].id = newId;\n        }\n      });\n    } // Remove any unwanted/invalid namespaces that might have been added by SVG editing tools\n\n\n    svg.removeAttribute('xmlns:a'); // Post page load injected SVGs don't automatically have their script\n    // elements run, so we'll need to make that happen, if requested\n    // Find then prune the scripts\n\n    var scripts = svg.querySelectorAll('script');\n    var scriptsToEval = [];\n    var script, scriptType;\n\n    for (var k = 0, scriptsLen = scripts.length; k < scriptsLen; k++) {\n      scriptType = scripts[k].getAttribute('type'); // Only process javascript types.\n      // SVG defaults to 'application/ecmascript' for unset types\n\n      if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {\n        // innerText for IE, textContent for other browsers\n        script = scripts[k].innerText || scripts[k].textContent; // Stash\n\n        scriptsToEval.push(script); // Tidy up and remove the script element since we don't need it anymore\n\n        svg.removeChild(scripts[k]);\n      }\n    } // Run/Eval the scripts if needed\n\n\n    if (scriptsToEval.length > 0 && (evalScripts === 'always' || evalScripts === 'once' && !ranScripts[imgUrl])) {\n      for (var l = 0, scriptsToEvalLen = scriptsToEval.length; l < scriptsToEvalLen; l++) {\n        // :NOTE: Yup, this is a form of eval, but it is being used to eval code\n        // the caller has explictely asked to be loaded, and the code is in a caller\n        // defined SVG file... not raw user input.\n        //\n        // Also, the code is evaluated in a closure and not in the global scope.\n        // If you need to put something in global scope, use 'window'\n        // eslint-disable-next-line no-new-func\n        new Function(scriptsToEval[l])(window);\n      } // Remember we already ran scripts for this svg\n\n\n      ranScripts[imgUrl] = true;\n    } // :WORKAROUND:\n    // IE doesn't evaluate <style> tags in SVGs that are dynamically added to the page.\n    // This trick will trigger IE to read and use any existing SVG <style> tags.\n    //\n    // Reference: https://github.com/iconic/SVGInjector/issues/23\n\n\n    var styleTags = svg.querySelectorAll('style');\n    Array.prototype.forEach.call(styleTags, function (styleTag) {\n      styleTag.textContent += '';\n    });\n    svg.setAttribute('xmlns', svgNamespace);\n    svg.setAttribute('xmlns:xlink', xlinkNamespace); // Replace the image with the svg\n\n    el.parentNode.replaceChild(svg, el); // Now that we no longer need it, drop references\n    // to the original element so it can be GC'd\n\n    delete injectedElements[injectedElements.indexOf(el)];\n    el = null; // Increment the injected count\n\n    injectCount++;\n    callback(null, svg);\n  });\n};\n\nexport default injectElement;","import cloneSvg from './clone-svg.js';\nimport { processRequestQueue, queueRequest } from './request-queue.js';\nimport svgCache from './svg-cache.js';\n\nvar loadSvg = function loadSvg(url, callback) {\n  var isLocal = window.location.protocol === 'file:';\n\n  if (svgCache[url] !== undefined) {\n    if (svgCache[url] instanceof SVGSVGElement) {\n      callback(null, cloneSvg(svgCache[url]));\n      return;\n    }\n\n    if (svgCache[url] instanceof Error) {\n      callback(svgCache[url]);\n      return;\n    } // We don't have it in cache yet, but we are loading it, so queue this\n    // request.\n\n\n    queueRequest(url, callback);\n  } else {\n    if (!window.XMLHttpRequest) {\n      callback(new Error('Browser does not support XMLHttpRequest'));\n      return false;\n    } // Seed the cache to indicate we are loading this URL already\n\n\n    svgCache[url] = {};\n    queueRequest(url, callback);\n    var httpRequest = new XMLHttpRequest();\n\n    httpRequest.onreadystatechange = function () {\n      try {\n        if (httpRequest.readyState === 4) {\n          if (httpRequest.status === 404 || httpRequest.responseXML === null) {\n            throw new Error(isLocal ? 'Note: SVG injection ajax calls do not work locally without adjusting security setting in your browser. Or consider using a local webserver.' : 'Unable to load SVG file: ' + url);\n          } // 200 success from server, or 0 when using file:// protocol locally\n\n\n          if (httpRequest.status === 200 || isLocal && httpRequest.status === 0) {\n            if (httpRequest.responseXML instanceof Document) {\n              svgCache[url] = httpRequest.responseXML.documentElement;\n            } else if (DOMParser && DOMParser instanceof Function) {\n              // IE9 doesn't create a responseXML Document object from loaded SVG,\n              // and throws a \"DOM Exception: HIERARCHY_REQUEST_ERR (3)\" error\n              // when injected.\n              //\n              // So, we'll just create our own manually via the DOMParser using\n              // the the raw XML responseText.\n              //\n              // :NOTE: IE8 and older doesn't have DOMParser, but they can't do\n              // SVG either, so...\n              var xmlDoc;\n\n              try {\n                var parser = new DOMParser();\n                xmlDoc = parser.parseFromString(httpRequest.responseText, 'text/xml');\n              } catch (e) {\n                xmlDoc = undefined;\n              }\n\n              if (!xmlDoc || xmlDoc.getElementsByTagName('parsererror').length) {\n                throw new Error('Unable to parse SVG file: ' + url);\n              }\n\n              svgCache[url] = xmlDoc.documentElement;\n            }\n\n            processRequestQueue(url);\n          } else {\n            throw new Error('There was a problem injecting the SVG: ' + httpRequest.status + ' ' + httpRequest.statusText);\n          }\n        }\n      } catch (error) {\n        svgCache[url] = error;\n        processRequestQueue(url);\n      }\n    };\n\n    httpRequest.open('GET', url); // Treat and parse the response as XML, even if the\n    // server sends us a different mimetype\n\n    if (httpRequest.overrideMimeType) httpRequest.overrideMimeType('text/xml');\n    httpRequest.send();\n  }\n};\n\nexport default loadSvg;","var uniqueClasses = function uniqueClasses(list) {\n  list = list.split(' ');\n  var hash = {};\n  var i = list.length;\n  var out = [];\n\n  while (i--) {\n    if (!hash.hasOwnProperty(list[i])) {\n      hash[list[i]] = 1;\n      out.unshift(list[i]);\n    }\n  }\n\n  return out.join(' ');\n};\n\nexport default uniqueClasses;","import SVGInjector from '@tanem/svg-injector'\nimport * as PropTypes from 'prop-types'\nimport * as React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport shallowDiffers from './shallow-differs'\n\nexport type OnInjected = (\n  error: Error | null,\n  svg: SVGSVGElement | undefined\n) => void\n\ntype WrapperType = HTMLSpanElement | HTMLDivElement\n\ninterface Props {\n  evalScripts?: 'always' | 'once' | 'never'\n  fallback?: React.ReactType\n  loading?: React.ReactType\n  onInjected?: OnInjected\n  renumerateIRIElements?: boolean\n  src: string\n  svgClassName?: string\n  svgStyle?: React.CSSProperties\n  wrapper?: 'div' | 'span'\n}\n\ninterface State {\n  hasError: boolean\n  isLoading: boolean\n}\n\nexport default class ReactSVG extends React.Component<\n  Props &\n    React.DetailedHTMLProps<React.HTMLAttributes<WrapperType>, WrapperType>,\n  State\n> {\n  static defaultProps = {\n    evalScripts: 'never',\n    fallback: null,\n    loading: null,\n    onInjected: () => undefined,\n    renumerateIRIElements: true,\n    svgClassName: null,\n    svgStyle: {},\n    wrapper: 'div'\n  }\n\n  static propTypes = {\n    evalScripts: PropTypes.oneOf(['always', 'once', 'never']),\n    fallback: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.object,\n      PropTypes.string\n    ]),\n    loading: PropTypes.oneOfType([\n      PropTypes.func,\n      PropTypes.object,\n      PropTypes.string\n    ]),\n    onInjected: PropTypes.func,\n    renumerateIRIElements: PropTypes.bool,\n    src: PropTypes.string.isRequired,\n    svgClassName: PropTypes.string,\n    svgStyle: PropTypes.object,\n    wrapper: PropTypes.oneOf(['div', 'span'])\n  }\n\n  initialState = {\n    hasError: false,\n    isLoading: true\n  }\n\n  state = this.initialState\n\n  // tslint:disable-next-line:variable-name\n  _isMounted = false\n\n  container?: WrapperType | null\n\n  svgWrapper?: WrapperType | null\n\n  refCallback = (container: WrapperType | null) => {\n    this.container = container\n  }\n\n  renderSVG() {\n    if (this.container instanceof Node) {\n      const {\n        evalScripts,\n        renumerateIRIElements,\n        src,\n        svgClassName,\n        svgStyle\n      } = this.props\n      const onInjected = this.props.onInjected!\n      const Wrapper = this.props.wrapper!\n\n      const wrapper = document.createElement(Wrapper)\n      wrapper.innerHTML = ReactDOMServer.renderToStaticMarkup(\n        <Wrapper>\n          <Wrapper className={svgClassName} data-src={src} style={svgStyle} />\n        </Wrapper>\n      )\n\n      this.svgWrapper = this.container.appendChild(\n        wrapper.firstChild as WrapperType\n      )\n\n      const each: OnInjected = (error, svg) => {\n        if (error) {\n          this.removeSVG()\n        }\n\n        // TODO: It'd be better to cleanly unsubscribe from SVGInjector\n        // callbacks instead of tracking a property like this.\n        if (this._isMounted) {\n          this.setState(\n            () => ({\n              hasError: !!error,\n              isLoading: false\n            }),\n            () => {\n              onInjected(error, svg)\n            }\n          )\n        }\n      }\n\n      SVGInjector(this.svgWrapper.firstChild, {\n        each,\n        evalScripts,\n        renumerateIRIElements\n      })\n    }\n  }\n\n  removeSVG() {\n    if (this.container instanceof Node && this.svgWrapper instanceof Node) {\n      this.container.removeChild(this.svgWrapper)\n      this.svgWrapper = null\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n    this.renderSVG()\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (shallowDiffers(prevProps, this.props)) {\n      this.setState(\n        () => this.initialState,\n        () => {\n          this.removeSVG()\n          this.renderSVG()\n        }\n      )\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false\n    this.removeSVG()\n  }\n\n  render() {\n    const {\n      evalScripts,\n      fallback: Fallback,\n      loading: Loading,\n      onInjected,\n      renumerateIRIElements,\n      src,\n      svgClassName,\n      svgStyle,\n      wrapper,\n      ...rest\n    } = this.props\n    const Wrapper = wrapper!\n\n    return (\n      <Wrapper {...rest} ref={this.refCallback}>\n        {this.state.isLoading && Loading && <Loading />}\n        {this.state.hasError && Fallback && <Fallback />}\n      </Wrapper>\n    )\n  }\n}\n","import injectElement from './inject-element.js';\n/**\n * :NOTE: We are using get/setAttribute with SVG because the SVG DOM spec\n * differs from HTML DOM and can return other unexpected object types when\n * trying to directly access svg properties. ex: \"className\" returns a\n * SVGAnimatedString with the class value found in the \"baseVal\" property,\n * instead of simple string like with HTML Elements.\n */\n\nvar SVGInjector = function SVGInjector(elements, _temp, done) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$evalScripts = _ref.evalScripts,\n      evalScripts = _ref$evalScripts === void 0 ? 'always' : _ref$evalScripts,\n      _ref$pngFallback = _ref.pngFallback,\n      pngFallback = _ref$pngFallback === void 0 ? false : _ref$pngFallback,\n      _ref$each = _ref.each,\n      eachCallback = _ref$each === void 0 ? function () {\n    return undefined;\n  } : _ref$each,\n      _ref$renumerateIRIEle = _ref.renumerateIRIElements,\n      renumerateIRIElements = _ref$renumerateIRIEle === void 0 ? true : _ref$renumerateIRIEle;\n\n  if (done === void 0) {\n    done = function done() {\n      return undefined;\n    };\n  }\n\n  if (elements.length !== undefined) {\n    var elementsLoaded = 0;\n    Array.prototype.forEach.call(elements, function (element) {\n      injectElement(element, evalScripts, pngFallback, renumerateIRIElements, function (error, svg) {\n        eachCallback(error, svg);\n\n        if (elements.length === ++elementsLoaded) {\n          done(elementsLoaded);\n        }\n      });\n    });\n  } else {\n    if (elements) {\n      injectElement(elements, evalScripts, pngFallback, renumerateIRIElements, function (error, svg) {\n        eachCallback(error, svg);\n        done(1);\n        elements = null;\n      });\n    } else {\n      done(0);\n    }\n  }\n};\n\nexport default SVGInjector;","// Hat-tip: https://github.com/developit/preact-compat/blob/master/src/index.js#L402.\n\ninterface O {\n  [key: string]: any\n}\n\nconst shallowDiffers = (a: O, b: O) => {\n  for (const i in a) {\n    if (!(i in b)) {\n      return true\n    }\n  }\n\n  for (const i in b) {\n    if (a[i] !== b[i]) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport default shallowDiffers\n"],"names":["_extends","module","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","excluded","sourceKeys","keys","indexOf","subClass","superClass","create","constructor","__proto__","cloneSvg","sourceSvg","cloneNode","svgCache","requestQueue","queueRequest","url","callback","push","processRequestQueue","len","index","setTimeout","Array","isArray","cb","SVGSVGElement","Error","xlinkNamespace","injectedElements","ranScripts","injectCount","injectElement","el","evalScripts","pngFallback","renumerateIRIElements","hasSvgSupport","document","implementation","hasFeature","imgUrl","getAttribute","test","setAttribute","isLocal","window","location","protocol","undefined","XMLHttpRequest","httpRequest","onreadystatechange","readyState","status","responseXML","statusText","Document","documentElement","DOMParser","Function","xmlDoc","parseFromString","responseText","e","getElementsByTagName","error","open","overrideMimeType","send","loadSvg","svg","imgId","imgTitle","classMerge","concat","join","list","hash","split","out","unshift","uniqueClasses","imgStyle","imgData","filter","attributes","at","name","forEach","dataAttr","value","element","elementDefs","properties","currentId","newId","iriElementsAndProperties","clipPath","color-profile","cursor","linearGradient","marker","mask","pattern","radialGradient","elementsLen","querySelectorAll","referencingElements","id","property","j","referencingElementLen","attrValue","match","RegExp","allLinks","links","k","allLinksLen","getAttributeNS","toString","l","linksLen","setAttributeNS","removeAttribute","script","scriptType","scripts","scriptsToEval","scriptsLen","innerText","textContent","removeChild","scriptsToEvalLen","styleTags","styleTag","parentNode","replaceChild","perElementFallback","pop","replace","ReactSVG","initialState","hasError","isLoading","state","_this","_isMounted","container","svgWrapper","refCallback","renderSVG","Node","props","src","svgClassName","svgStyle","onInjected","Wrapper","wrapper","createElement","innerHTML","ReactDOMServer","renderToStaticMarkup","React.createElement","className","style","appendChild","firstChild","elements","_temp","done","_ref","_ref$evalScripts","_ref$pngFallback","_ref$each","each","eachCallback","_ref$renumerateIRIEle","elementsLoaded","SVGInjector","_this2","removeSVG","setState","componentDidMount","componentDidUpdate","prevProps","a","b","shallowDiffers","_this3","componentWillUnmount","render","Fallback","fallback","Loading","loading","rest","ref","React","defaultProps"],"mappings":"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"}